{"version":3,"sources":["logo.svg","firebase.js","Post.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","auth","storage","Post","postId","user","username","caption","imageUrl","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","text","type","placeholder","value","onChange","e","target","disabled","onClick","event","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","ImageUpload","image","setImage","progress","setProgress","setCaption","max","files","Button","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","alert","message","child","getDownloadURL","then","url","rand","random","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","modalStyle","posts","setPosts","open","setOpen","openSignIn","setOpenSignIn","setUsername","password","setPassword","email","setEmail","setUser","onAuthStateChanged","authUser","updateProfile","id","post","Modal","onClose","style","Input","createUserWithEmailAndPassword","catch","signInWithEmailAndPassword","signOut","key","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bcda1963.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// Basic default Reference firebase setup\n\nimport firebase from \"firebase\";\n\nconst firebaseApp = firebase.initializeApp({\n\n    //from Firebase config website\n    apiKey: \"AIzaSyDurzVCGhHbeZUn-BCZxy0cLavsfpnRUtI\",\n    authDomain: \"instagram-clone-react-52896.firebaseapp.com\",\n    databaseURL: \"https://instagram-clone-react-52896.firebaseio.com\",\n    projectId: \"instagram-clone-react-52896\",\n    storageBucket: \"instagram-clone-react-52896.appspot.com\",\n    messagingSenderId: \"333891082464\",\n    appId: \"1:333891082464:web:e096ab48006d1f30449885\"\n    //from Firebase config website\n});\n\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst storage = firebase.storage();\n\nexport { db, auth, storage };\n\n// export default db;","import React, { useState, useEffect } from 'react'\nimport \"./Post.css\"\nimport { db } from './firebase';\nimport Avatar from \"@material-ui/core/Avatar\";\nimport firebase from 'firebase';\n\nfunction Post({ postId, user, username, caption, imageUrl }) {\n\n    const [comments, setComments] = useState([]);\n    const [comment, setComment] = useState('')\n\n    useEffect(() => {\n        let unsubscribe;\n        if (postId) {\n            unsubscribe = db\n                .collection(\"posts\")\n                .doc(postId)\n                .collection(\"comments\")\n                .orderBy(\"timestamp\", 'desc')\n                .onSnapshot((snapshot) => {\n                    setComments(snapshot.docs.map((doc) => doc.data()));\n                })\n        }\n        return () => {\n            unsubscribe();\n        };\n    }, [postId]);\n\n\n\n\n    const postComment = (event) => {\n        event.preventDefault();\n\n        db.collection(\"posts\").doc(postId).collection(\"comments\").add({\n            text: comment,\n            username: user.displayName,\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\n        });\n        setComment('');\n\n    }\n\n\n\n\n\n\n\n    return (\n        <div className=\"post\">\n            <div className=\"post__header\">\n                <Avatar\n                    className=\"post__avatar\"\n                    alt={username}\n                    src=\"/static/images/avatar/1.jpg\"\n                />\n                <h3 >{username}</h3>\n            </div>\n            <img className=\"post__image\" src={imageUrl} alt=\"\"></img>\n            <h4 className=\"post__text\"><strong>{username} </strong> {caption}</h4>\n\n\n            <div className=\"post__comments\">\n                {comments.map((comment) => (\n                    <p>\n                        <strong>{comment.username}</strong> {comment.text}\n                    </p>\n                ))}\n            </div>\n\n            {user && (\n                <form className=\"post__commentBox\">\n                    <input\n                        className=\"post__input\"\n                        type=\"text\"\n                        placeholder=\"Add a comment...\"\n                        value={comment}\n                        onChange={(e) => setComment(e.target.value)}\n                    />\n                    <button\n                        className=\"post__button\"\n                        disabled={!comment}\n                        type=\"submit\"\n                        onClick={postComment}\n                    >Post</button>\n                </form>\n            )}\n\n\n\n\n        </div>\n\n    )\n}\n\nexport default Post\n","import React, { useState } from 'react';\nimport { Button } from '@material-ui/core';\nimport firebase from \"firebase\";\nimport { db, storage } from './firebase';\nimport './imageUpload.css';\n\nfunction ImageUpload({ username }) {\n    const [image, setImage] = useState(null);\n    const [progress, setProgress] = useState(0);\n    const [caption, setCaption] = useState('');\n\n    const handleChange = (e) => {\n        if (e.target.files[0]) {\n            setImage(e.target.files[0]);\n\n        }\n    };\n\n    const handleUpload = () => {\n        const uploadTask = storage.ref(`images/${image.name}`).put(image);\n\n        uploadTask.on(\n            \"state_changed\",\n            (snapshot) => {\n                //progress function...\n                const progress = Math.round(\n                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n                );\n                setProgress(progress);\n            },\n            (error) => {\n                // Error Function ...\n                console.log(error);\n                alert(error.message);\n            },\n            () => {\n                //complete function\n                storage.ref(\"images\")\n                    .child(image.name)\n                    .getDownloadURL()\n                    .then(url => {\n                        // Post image inside db\n                        db.collection(\"posts\").add({\n                            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            caption: caption,\n                            imageUrl: url,\n                            username: username\n                        });\n                        setProgress(0);\n                        setCaption(\"\");\n                        setImage(null);\n\n                    })\n            }\n\n\n        )\n    }\n\n    return (\n        <div className=\"imageupload\">\n            {/* I want to have.... */}\n            {/* Caption Input */}\n            {/* File Picker */}\n            {/* Post Button */}\n\n            <progress value={progress} max=\"100\" />\n            <input type=\"text\" placeholder='Enter a Caption...' onChange={(e) => setCaption(e.target.value)} value={caption} />\n            <input type=\"file\" onChange={handleChange} />\n            <Button onClick={handleUpload}>\n                Upload\n            </Button>\n\n        </div>\n    )\n}\n\nexport default ImageUpload\n","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Post from \"./Post\";\nimport { db, auth } from \"./firebase\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport { Button, Input } from '@material-ui/core';\nimport ImageUpload from './ImageUpload';\nimport InstagramEmbed from \"react-instagram-embed\";\n\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\n\n\nfunction App() {\n  const classes = useStyles();\n  const [modalStyle] = useState(getModalStyle);\n  const [posts, setPosts] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [openSignIn, setOpenSignIn] = useState(false);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState('');\n  const [user, setUser] = useState(null);\n\n\n  useEffect(() => {\n    // Gonna Listen , if any auth change happen , log in out create\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        // user has logged in...\n        console.log(authUser);\n        setUser(authUser); // will keep track of everytime the page is refresh\n        if (authUser.displayName) {\n          //dont update username\n        } else {\n          // if we just created someone....\n          return authUser.updateProfile({\n            displayName: username,\n          });\n        }\n      } else {\n        // user has logged out....\n        setUser(null);\n      }\n    })\n\n    return () => {\n      //perform some cleanup actions\n      unsubscribe();\n    }\n  }, [user, username]) //the useEffect , will listen to the user and username\n  //everytime you include a variable inside , you must include it here as a dependency\n  // so the code update when the value get revised\n\n\n\n\n\n\n  // useEffect --> Runs Once when we launch the app // Runs a piece of code based on as specific condition\n  useEffect(() => {\n    // This will executed everytime the page is refreshes\n    db.collection(\"posts\").orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      //  Every time a new post is added , this code fires (snapShot)\n      setPosts(snapshot.docs.map(doc => ({\n        id: doc.id,\n        post: doc.data()\n      })));\n    })\n  }, []);\n  // [] -> indicates the situation when the code will be executed\n\n\n\n\n\n\n\n  const signUp = (event) => {\n    event.preventDefault();\n    auth\n      .createUserWithEmailAndPassword(email, password)\n      .then((authUser) => {\n        return authUser.user.updateProfile({\n          displayName: username\n        })\n      })\n      .catch((error) => alert(error.message));\n\n    setOpen(false);\n  }\n\n  const signIn = (event) => {\n    event.preventDefault();\n    auth\n      .signInWithEmailAndPassword(email, password)\n      .catch((error) => alert(error.message));\n\n    setOpenSignIn(false);\n  }\n\n\n\n\n\n  return (\n    <div className=\"app\">\n\n\n\n\n\n\n      <Modal\n        open={open}\n        onClose={() => setOpen(false)}\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\" >\n            <center>\n              <img className=\"app__headerImage\" src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\" alt=\"\" />\n            </center>\n            <Input type=\"text\" onChange={(e) => setUsername(e.target.value)} value={username} placeholder=\"username\" />\n            <Input type=\"text\" onChange={(e) => setEmail(e.target.value)} value={email} placeholder=\"email\" />\n            <Input type=\"password\" onChange={(e) => setPassword(e.target.value)} value={password} placeholder=\"password\" />\n            <Button type=\"submit\" onClick={signUp}>SignUp</Button>\n          </form>\n        </div>\n      </Modal>\n\n      <Modal\n        open={openSignIn}\n        onClose={() => setOpenSignIn(false)}\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\" >\n            <center>\n              <img className=\"app__headerImage\" src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\" alt=\"\" />\n            </center>\n            <Input type=\"text\" onChange={(e) => setEmail(e.target.value)} value={email} placeholder=\"email\" />\n            <Input type=\"password\" onChange={(e) => setPassword(e.target.value)} value={password} placeholder=\"password\" />\n            <Button type=\"submit\" onClick={signIn}>SignIn</Button>\n          </form>\n        </div>\n      </Modal>\n\n\n\n\n\n\n\n\n      <div className=\"app__header\">\n        <img className=\"app__headerImage\" src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\" alt=\"\"></img>\n\n        {user ? (\n          <Button onClick={() => auth.signOut()}>Log Out</Button>\n        ) : <div className=\"app__logininContainer\">\n            <Button onClick={() => setOpen(true)}>Sign Up</Button>\n            <Button onClick={() => setOpenSignIn(true)}>Sign In</Button>\n          </div>\n        }\n\n\n      </div>\n\n\n\n\n\n      <div className=\"app__posts\">\n        <div className=\"app__postsLeft\">\n          {\n            posts.map(({ id, post }) => (\n              <Post key={id} postId={id} user={user} username={post.username} caption={post.caption} imageUrl={post.imageUrl} />\n            ))\n          }\n\n        </div>\n        <div className=\"app__postsRight\">\n          <InstagramEmbed\n            url='https://www.instagram.com/p/CCf9aDsghRf/'\n            maxWidth={320}\n            hideCaption={false}\n            containerTagName='div'\n            protocol=''\n            injectScript\n            onLoading={() => { }}\n            onSuccess={() => { }}\n            onAfterRender={() => { }}\n            onFailure={() => { }}\n          />\n        </div>\n      </div>\n\n\n\n\n\n\n\n\n      {/* specifying the id , so that react won't render all the docs (posts). Only one added object (new post), not all */}\n\n\n\n      {user?.displayName ? (\n        <ImageUpload username={user.displayName} />\n      ) : (\n          <h3>Sorry you need to login to upload</h3>\n        )}\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}